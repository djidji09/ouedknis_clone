// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String
  phone       String?
  role        Role      @default(USER)
  isActive    Boolean   @default(true)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  ads              Ad[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  favorites        Favorite[]
  views            AdView[]

  @@map("users")
}

// Category model
model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String?
  parentId    String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryHierarchy")
  ads           Ad[]

  @@map("categories")
}

// Ad model
model Ad {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  location    String
  condition   Condition
  isActive    Boolean     @default(true)
  userId      String
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  Category    @relation(fields: [categoryId], references: [id])
  images    AdImage[]
  messages  Message[]
  favorites Favorite[]
  views     AdView[]

  @@map("ads")
}

// Ad Image model
model AdImage {
  id     String  @id @default(cuid())
  url    String
  isMain Boolean @default(false)
  adId   String
  createdAt DateTime @default(now())

  // Relations
  ad Ad @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@map("ad_images")
}

// Message model
model Message {
  id         String   @id @default(cuid())
  content    String
  isRead     Boolean  @default(false)
  senderId   String
  receiverId String
  adId       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  ad       Ad?  @relation(fields: [adId], references: [id], onDelete: SetNull)

  @@map("messages")
}

// Favorite model
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  adId      String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ad   Ad   @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([userId, adId])
  @@map("favorites")
}

// Ad View model (for analytics)
model AdView {
  id        String   @id @default(cuid())
  adId      String
  userId    String?
  ipAddress String?
  createdAt DateTime @default(now())

  // Relations
  ad   Ad   @relation(fields: [adId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("ad_views")
}

// Enums
enum Role {
  USER
  ADMIN

  @@map("role")
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR

  @@map("condition")
}
